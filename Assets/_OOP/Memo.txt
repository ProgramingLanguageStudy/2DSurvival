1. 객체 지향이란?
객체 지향 프로그래밍(Object-Oriented Programming, OOP)

게임 프로그램을 객체 단위로 구분해서 프로그래밍하는 방식

클래스 - 객체를 만드는 설계도

2. 객체 지향의 핵심 요소
1) 캡슐화(Encapsulation)
필요한 것들만 외부에 공개
데이터는 감추고 함수는 공개
- private, public

2) 상속(Inheritance)
공통된 속성(변수)과 기능(함수)을 상위 클래스에서 정의하고
하위 클래스는 이를 물려받아 재사용한다.

3) 다형성(Polymorphism)
같은 함수를 호출해도 객체의 종류에 따라 서로 다르게 동작하게 하는 것

4) 추상화(Abstraction)
복잡한 내부 구현은 숨기고, 필요한 기능만 외부에 노출하는 것

3. 유니티에서 객체
1) 클래스(Class)
- 객체를 만드는 설계도
- new 키워드를 사용해 객체를 생성할 수 있다.

2) 객체(Object)
- 클래스를 바탕으로 만들어진 실체
- 클래스에 정의된 변수들과 함수를 갖고 있는 독립적인 대상

3) MonoBehaviour(Component)
- 유니티에서 제공하는 특별한 클래스
- 직접 new 키워드를 사용하는 대신,
AddComponent로 게임오브젝트에 컴포넌트로 객체를 만들어 사용한다.
- 인스펙터뷰에서 참조 변수 연결이 가능하다.

4) 일반 객체(MonoBehaviour 상속 X)
- 우리가 직접 만드는 C# 클래스에서 new 키워드를 통해 만든 객체
- MonoBehaviour의 기능들은 없지만,
주로 상태 관리, 데이터 묶음 등에 사용한다.
- 인스펙터뷰에서 참조 변수 연결이 불가능하다.
컴포넌트로도 쓸 수 없고 코드상에서 new 키워드로 객체를 만들어 사용한다.
- [System.Serializable]을 사용해 인스펙터뷰에서 변수들을 편집 가능하게 만들 수 있다.

5) 스크립터블 오브젝트(Scriptable Object)
- 유니티에서 제공하는 특별한 클래스
- 컴포넌트로 사용되는 대신 일종의 에셋 파일
- 인스펙터뷰에서 편집 가능하다. 인스펙터뷰에서 참조 변수 연결도 가능하다.

6) 게임오브젝트(GameObject)
- 유니티에서 제공하는 특별한 클래스
- CreateEmpty해서 씬에 새 게임오브젝트 객체를 만들 수 있다.
- new GameObject()로 코드상에서 새 게임오브젝트 객체를 생성할 수도 있다.
- 씬에 소속되어 존재하고 컴포넌트들을 갖고 있을 수 있다.
